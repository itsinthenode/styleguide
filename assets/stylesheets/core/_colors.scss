// Colors
//
// Weight: -99
//
// Style guide: Colors

// internal mixin to generate color samples
@mixin color-samples($color-map) {
  height: 40px;
  padding-left: 5px;
  line-height: 40px;

  $color-index: 0;
  $color-names: map-keys($color-map);
  @each $name, $variants in $color-map {
    @each $variant-name, $value in $variants {
      $color-index: $color-index + 1;
      &.sample#{$color-index} {
        background-color: $value;
        &:after {
          content: "#{$name} (#{$variant-name}): #{$value}";
          @if (lightness($value) < 30%) {
            color: white;
          }
        }
      }
    }
  }
}

// Color palette
//
// Weight: -1
//
// Markup:
// <div class="color-sample sample1"></div>
// <div class="color-sample sample2"></div>
// <div class="color-sample sample3"></div>
// <div class="color-sample sample4"></div>
// <div class="color-sample sample5"></div>
// <div class="color-sample sample6"></div>
// <div class="color-sample sample7"></div>
// <div class="color-sample sample8"></div>
// <div class="color-sample sample9"></div>
// <div class="color-sample sample10"></div>
// <div class="color-sample sample11"></div>
// <div class="color-sample sample12"></div>
// <div class="color-sample sample13"></div>
// <div class="color-sample sample14"></div>
// <div class="color-sample sample15"></div>
// <div class="color-sample sample16"></div>
// <div class="color-sample sample17"></div>
// <div class="color-sample sample18"></div>
// <div class="color-sample sample19"></div>
// <div class="color-sample sample20"></div>
// <div class="color-sample sample21"></div>
// <div class="color-sample sample22"></div>
// <div class="color-sample sample23"></div>
// <div class="color-sample sample24"></div>
// <div class="color-sample sample25"></div>
//
// Style guide: Colors.Palette

$color-palette: (
  'black': (
    base: #000
  ),
  'white': (
    base: #fff
  ),
  'carbon': (
    base: #202A37,
    light1: #4D555F,
    light2: #797F87,
    light3: #A6AAAF,
    light4: #D2D4D7,
    light5: #E8E9EB,
    light6: #F9F9FA
  ),
  'metal': (
    base: #888FA8,
    light1: #A0A5B9,
    light2: #B8BCCB,
    light3: #CFD2DC,
    light4: #E7E9EE,
    light5: #F3F3F6,
    light6: #F8F9FA,
    light7: #F7F8F9
  ),
  'blue': (
    base: #0D58C1,
    light1: #2278F1,
    light2: #9FC4F9,
    light3: #CAE6FF
  ),
  'turquoise': (
    base: #2DB3FF
  ),
  'green': (
    base: #2ABF00,
    light1: #BBEDA2
  ),
  'red': (
    base: #E94659
  )
);

// Color palette (compat names for new values)
$colors-new-compat: (
  'carbon-dark': #0D1722,
  'metal-light': #cdd0d4,
  'royal-blue': #2278f1,
  'sky-blue': #cae6ff,
  'lime': #2abf00,
  'grass': #bbeda2,
  'alarm-red': #e94659
);

// Color palette (old compat names with old values)
$colors-old-compat: (
  'grey-darker': #202A37, // carbon
  'grey': #888fa8,       // metal
  'grey-light': #cdd0d4, // metal-light
  'grey-lighter': #f0f0f0,
  'grey-dark': #b4b4b4,
  'blue-light': #cae6ff, // sky-blue
  'green-light': #bbeda2,// grass
  'yellow': yellow,
  'yellow-light': yellow,
  'orange': #ff8d11,
  'purple': purple
);

// helper variable
$colors-all: map-merge(
                $color-palette,
                map-merge(
                  $colors-old-compat,
                  $colors-new-compat
                )
              );

@if $show-samples {
  .color-sample {
    @include color-samples($color-palette);
  }
}

// Color functions
//
// Style guide: Colors.Functions

// color($name)
//
// Sass function that returns specified color hex value from color palette
//
// Usage:
//
// <pre>
// .my-component {
//   background-color: color("lime");
//   color: color("carbon");
// }
// </pre>
//
// $name - color name
//
// Style guide: Colors.Functions.color

@function color($name, $variant-name: 'base', $alpha: 1.0) {
  $color-name: quote($name);

  @if not map-has-key($colors-all, $color-name) {
    @error "'#{$name}' is an invalid color! Choose one of '#{map-keys($color-palette)}'.";
  }
  @if not map-has-key($color-palette, $color-name) {
    @if map-has-key($colors-old-compat, $color-name) {
      @warn "you used an old color: '#{$color-name}'. Please use the new ones.";
      @return map-get($colors-old-compat, $color-name);
    }
    @if map-has-key($colors-new-compat, $color-name) {
      @warn "you used a compat color: '#{$color-name}'. Please use the new ones.";
      @return map-get($colors-new-compat, $color-name);
    }
  }

  $variants: map-get($color-palette, $color-name);
  $color: map-get($variants, unquote($variant-name));

  @if $alpha < 1.0 {
    @return rgba($color, $alpha);
  } @else {
    @return $color;
  }
}

// Deprecated
@function nd-color($name) {
  @warn "'nd-color' is deprecated. Please use 'color' instead.";
  @return color($name);
}

// Deprecated
@mixin nd-color($bgColor, $fontColor) {
  @warn "'nd-color' mixin is deprecated. Please use the normal color functions.";
  @if not map-has-key($colors, $bgColor) {
    @error "'#{$bgColor} is an invalid background color! Choose one of #{map-keys($colors)}";
  }
  @if not map-has-key($colors, $fontColor) {
    @error "'#{$fontColor} is an invalid font color! Choose one of #{map-keys($colors)}";
  }
  background-color: color($bgColor);
  color: color($fontColor);
}

