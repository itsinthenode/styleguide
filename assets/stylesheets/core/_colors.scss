// Colors
//
// Weight: -99
//
// Style guide: Colors

// internal mixin to generate color samples
@mixin color-samples($color-map) {
  height: 40px;
  padding-left: 5px;
  line-height: 40px;

  $color-names: map-keys($color-map);
  @each $name, $value in $color-map {
    &.sample#{index($color-names, $name)} {
      background-color: $value;
      &:after {
        content: "#{$name}: #{$value}";
        @if (lightness($value) < 30%) {
          color: white;
        }
      }
    }
  }
}

// Color palette
//
// Weight: -1
//
// Markup:
// <div class="color-sample sample1"></div>
// <div class="color-sample sample2"></div>
// <div class="color-sample sample3"></div>
// <div class="color-sample sample4"></div>
// <div class="color-sample sample5"></div>
// <div class="color-sample sample6"></div>
// <div class="color-sample sample7"></div>
// <div class="color-sample sample8"></div>
// <div class="color-sample sample9"></div>
// <div class="color-sample sample10"></div>
//
// Style guide: Colors.Palette

// Color palette (new names)
$colors: (
  'carbon': #202a37,
  'carbon-dark': #0D1722,
  'carbon-lighter': #DEDFE1,
  'metal': #888fa8,
  'metal-light': #cdd0d4,
  'white': #ffffff,
  'royal-blue': #2278f1,
  'sky-blue': #cbe6ff,
  'lime': #2abf00,
  'grass': #bbeda2,
  'alarm-red': #e94659
);

// Color palette (old names)
$colors-old: (
  'black': #202a37,      // carbon
  'grey': #888fa8,       // metal
  'grey-light': #cdd0d4, // metal-light
  'white': #ffffff,      // white
  'blue': #2278f1,       // royal-blue
  'blue-light': #cbe6ff, // sky-blue
  'green': #2abf00,      // lime
  'green-light': #bbeda2,// grass
  'red': #e94659         // alarm-red
);

// Color palette (old compat names with old values)
$colors-old-compat: (
  'grey-lighter': #f0f0f0,
  'grey-dark': #b4b4b4,
  'orange': #ff8d11,

  // not in Sketch pattern library
  'grey-darker': #797979,
  'yellow': #FFD700,
  'yellow-light': #FFECAB,
  'red-light': lighten(#EC2B4B, 10),
  'purple': #4A38A5,
  'blue-light': #40ABEC,
  'blue-lighter': #ADCCE6,
  'green-ci': #71BD2B,
  'green-lighter': #D3EEB7
);

// Color palette (all merged)
$colors-all: map-merge($colors, map-merge($colors-old, $colors-old-compat));

@if $show-samples {
  .color-sample {
    @include color-samples($colors);
  }
}

// Color functions
//
// Style guide: Colors.Functions

// color($name)
//
// Sass function that returns specified color hex value from color palette
//
// Usage:
//
// <pre>
// .my-component {
//   background-color: color("lime");
//   color: color("carbon");
// }
// </pre>
//
// $name - color name
//
// Style guide: Colors.Functions.color

@function color($name) {
  @if not map-has-key($colors-all, $name) {
    @error "'#{$name}' is an invalid color! Choose one of #{map-keys($colors)}.";
  }
  @if not map-has-key($colors, $name) {
    @if map-has-key($colors-old, $name) {
      @warn "you used an old color: '#{$name}'. Please use the new ones.";
    }
    @if map-has-key($colors-old-compat, $name) {
      @warn "you used a compat color: '#{$name}'. Please use the new ones.";
    }
  }
  @return map-get($colors, $name);
}

// Deprecated
@function nd-color($name) {
  @warn "'nd-color' is deprecated. Please use 'color' instead.";
  @return color($name);
}

// Deprecated
@mixin nd-color($bgColor, $fontColor) {
  @warn "'nd-color' mixin is deprecated. Please use the normal color functions.";
  @if not map-has-key($colors, $bgColor) {
    @error "'#{$bgColor} is an invalid background color! Choose one of #{map-keys($colors)}";
  }
  @if not map-has-key($colors, $fontColor) {
    @error "'#{$fontColor} is an invalid font color! Choose one of #{map-keys($colors)}";
  }
  background-color: color($bgColor);
  color: color($fontColor);
}

